import uuid
from datetime import datetime
from pymongo import MongoClient
import gridfs
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import io

# CONFIG
MONGO_URI = "mongodb://localhost:27017/"
DB_NAME = "your_db_name"

def fetch_checklist(db, save_id=None, device_id=None):
    query = {}
    if save_id: query["save_id"] = save_id
    if device_id: query["device_id"] = device_id
    return list(db.compliance_checks.find(query))

def get_user_map(db):
    return {str(u["_id"]): u.get("name", u.get("email", "")) for u in db.users.find()}

def get_device_map(db):
    return {str(d["_id"]): d.get("hostname", d.get("name", "")) for d in db.devices.find()}

def get_control_map(db):
    return {c["control_id"]: c.get("description", "") for c in db.compliance_controls.find()}

def get_benchmark_map(db):
    return {str(b["_id"]): b.get("title", b.get("name", "")) for b in db.benchmarks.find()}

def fetch_additional_info(db, device_id, save_id, user_id):
    device = db.devices.find_one({"_id": device_id})
    save_config = db.saved_configurations.find_one({"_id": save_id})
    user = db.users.find_one({"_id": user_id})
    return device, save_config, user

def generate_grc_pdf(checklist, user_map, device_map, control_map, benchmark_map, device, save_config, user, generated_at):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter, rightMargin=30, leftMargin=30, topMargin=40, bottomMargin=18)
    styles = getSampleStyleSheet()
    elements = []

    # --- Cover Page ---
    elements.append(Paragraph("GRC Compliance Report", styles['Title']))
    elements.append(Spacer(1, 16))
    elements.append(Paragraph(f"Generated At: {generated_at.strftime('%Y-%m-%d %H:%M:%S UTC')}", styles['Normal']))
    elements.append(Spacer(1, 12))
    if device:
        elements.append(Paragraph(f"<b>Device:</b> {device.get('hostname', device.get('name', ''))}", styles['Normal']))
    if user:
        elements.append(Paragraph(f"<b>Generated By:</b> {user.get('name', user.get('email', ''))}", styles['Normal']))
    if save_config:
        elements.append(Paragraph(f"<b>Configuration:</b> {save_config.get('name', str(save_config.get('_id', '')))}", styles['Normal']))
    elements.append(Spacer(1, 24))
    elements.append(Paragraph("This report provides a comprehensive overview of compliance checks performed on the specified system and configuration, including control mappings, benchmarks, and status outcomes, suitable for GRC review.", styles['Italic']))
    elements.append(PageBreak())

    # --- Summary Section ---
    total = len(checklist)
    status_counts = {"checked": 0, "crossed": 0, "skipped": 0, "empty": 0}
    for c in checklist:
        st = c.get("status", "empty")
        if st in status_counts:
            status_counts[st] += 1
        else:
            status_counts["empty"] += 1

    summary_data = [
        ["Total Checks", str(total)],
        ["Checked", str(status_counts["checked"])],
        ["Crossed", str(status_counts["crossed"])],
        ["Skipped", str(status_counts["skipped"])],
        ["Empty", str(status_counts["empty"])]
    ]
    elements.append(Paragraph("Summary", styles["Heading2"]))
    summary_table = Table(summary_data, hAlign="LEFT")
    summary_table.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.grey),
        ("TEXTCOLOR", (0,0), (-1,0), colors.white),
        ("FONTNAME", (0,0), (-1,-1), "Helvetica"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("BOTTOMPADDING", (0,0), (-1,0), 6),
        ("BACKGROUND", (0,1), (-1,-1), colors.whitesmoke),
    ]))
    elements.append(summary_table)
    elements.append(Spacer(1, 20))

    # --- Checklist Table Section ---
    elements.append(Paragraph("Detailed Compliance Checklist", styles["Heading2"]))
    table_data = [[
        "Check ID", "Control", "Description", "Benchmark", "Status", "Checked By", "Checked At"
    ]]
    for entry in checklist:
        checked_by = user_map.get(str(entry.get("checked_by", "")), str(entry.get("checked_by", "")))
        checked_at = entry.get("checked_at", "")
        if checked_at and hasattr(checked_at, "strftime"):
            checked_at = checked_at.strftime("%Y-%m-%d %H:%M")
        else:
            checked_at = str(checked_at)
        row = [
            str(entry.get("check_id", "")),
            entry.get("control_id", ""),
            control_map.get(entry.get("control_id", ""), ""),
            benchmark_map.get(str(entry.get("benchmark_id", "")), str(entry.get("benchmark_id", ""))),
            entry.get("status", ""),
            checked_by,
            checked_at
        ]
        table_data.append(row)

    checklist_table = Table(table_data, repeatRows=1, colWidths=[55, 50, 130, 80, 45, 60, 60])
    checklist_table.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.darkblue),
        ("TEXTCOLOR", (0,0), (-1,0), colors.white),
        ("ALIGN", (0,0), (-1,-1), "LEFT"),
        ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold"),
        ("FONTSIZE", (0,0), (-1,0), 9),
        ("FONTSIZE", (0,1), (-1,-1), 8),
        ("ROWBACKGROUNDS", (0,1), (-1,-1), [colors.white, colors.whitesmoke]),
        ("VALIGN", (0,0), (-1,-1), "TOP"),
        ("LINEBELOW", (0,0), (-1,-1), 0.25, colors.grey)
    ]))
    elements.append(checklist_table)

    doc.build(elements)
    buffer.seek(0)
    return buffer

def store_report_pdf(db, fs, pdf_buffer, save_id, device_id, user_id, generated_at, metadata=None):
    file_id = fs.put(pdf_buffer, filename=f"GRC_Report_{save_id}_{device_id}.pdf")
    report_doc = {
        "report_id": str(uuid.uuid4()),
        "save_id": save_id,
        "device_id": device_id,
        "user_id": user_id,
        "generated_at": generated_at,
        "file_id": file_id,
        "metadata": metadata or {}
    }
    db.reports.insert_one(report_doc)
    return report_doc

def generate_and_store_grc_report(save_id, device_id, user_id, metadata=None):
    client = MongoClient(MONGO_URI)
    db = client[DB_NAME]
    fs = gridfs.GridFS(db)

    user_map = get_user_map(db)
    device_map = get_device_map(db)
    control_map = get_control_map(db)
    benchmark_map = get_benchmark_map(db)
    device, save_config, user = fetch_additional_info(db, device_id, save_id, user_id)

    checklist = fetch_checklist(db, save_id, device_id)
    generated_at = datetime.utcnow()

    pdf_buffer = generate_grc_pdf(
        checklist, user_map, device_map, control_map, benchmark_map,
        device, save_config, user, generated_at
    )

    report_doc = store_report_pdf(
        db, fs, pdf_buffer, save_id, device_id, user_id, generated_at, metadata
    )

    print(f"Report stored with report_id: {report_doc['report_id']}")

if __name__ == "__main__":
    # Replace with actual save_id, device_id, user_id from your DB
    generate_and_store_grc_report(
        save_id="uuid3",
        device_id="uuid2",
        user_id="uuid5",
        metadata={"description": "Automated GRC compliance report."}
    )